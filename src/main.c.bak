#include "bsp_utils.h"
#include "raylib.h"
#include "view_2d.h"
#include "view_3d.h"
#include "view_meta.h"
#include "view_tree.h"
#include <stdint.h>

int main() {

    SetConfigFlags(FLAG_WINDOW_RESIZABLE);
    InitWindow(WIDTH, HEIGHT, "csci 8442 bsp demo");

    uint32_t width = GetScreenWidth();
    uint32_t height = GetScreenHeight();
    uint32_t q_width = width / 2;
    uint32_t q_height = height / 2;

    RenderTexture2D q1_screen = LoadRenderTexture(q_width, q_height);
    RenderTexture2D q2_screen = LoadRenderTexture(q_width, q_height);
    RenderTexture2D q3_screen = LoadRenderTexture(q_width, q_height);
    RenderTexture2D q4_screen = LoadRenderTexture(q_width, q_height);

    Rectangle quadrant = {0.0f, 0.0f, (float)q_width, (float)-q_height};

    while (!WindowShouldClose()) {
        if (IsWindowResized() && !IsWindowFullscreen()) {
            width = GetScreenWidth();
            height = GetScreenHeight();
            q_width = width / 2;
            q_height = height / 2;
        }

        BeginTextureMode(q1_screen);
        DrawView2D();
        EndTextureMode();

        BeginTextureMode(q2_screen);
        DrawView3D();
        EndTextureMode();

        BeginTextureMode(q3_screen);
        DrawViewTree();
        EndTextureMode();

        BeginTextureMode(q4_screen);
        DrawViewMeta();
        EndTextureMode();

        BeginDrawing();
        ClearBackground(BG);

        DrawTextureRec(q1_screen.texture, quadrant, (Vector2){q_width, 0}, BG);
        DrawTextureRec(q2_screen.texture, quadrant, (Vector2){0, 0}, BG);
        DrawTextureRec(q3_screen.texture, quadrant, (Vector2){0, q_height}, BG);
        DrawTextureRec(q4_screen.texture, quadrant, (Vector2){q_width, q_height}, BG);

        DrawLine(0, q_height, width, q_height, FG);
        DrawLine(q_width, 0, q_width, height, FG);
        EndDrawing();
    }
}
